name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v0.1.0, v1.2.3, etc.

permissions:
  contents: write  # Required to create releases and upload assets

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ## Release ${{ github.ref_name }}

            ### Downloads
            - **Windows**: `rclone-selective-sync-amd64-installer.exe`
            - **macOS**: `rclone-selective-sync.app.zip` (Universal binary for Intel & Apple Silicon)
            - **Linux**: AppImage, DEB, and RPM packages available

            ### Installation
            - **Windows**: Download and run the installer
            - **macOS**: Download, unzip, and drag to Applications folder
            - **Linux**: Download your preferred package format

            ---
            Generated with GitHub Actions

  build-windows:
    name: Build Windows
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install NSIS
        run: |
          choco install nsis -y
          echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v3/cmd/wails3@latest

      - name: Install Task
        run: go install github.com/go-task/task/v3/cmd/task@latest

      - name: Update version.txt
        run: echo "${{ needs.create-release.outputs.version }}" > version.txt

      - name: Verify npm installation
        run: |
          npm --version
          node --version

      - name: Build Windows Installer
        run: task windows:package

      - name: List bin directory
        run: |
          if (Test-Path bin) {
            dir bin
          } else {
            Write-Host "bin directory does not exist"
          }
        if: always()

      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./bin/rclone-selective-sync-amd64-installer.exe
          asset_name: rclone-selective-sync-amd64-installer.exe
          asset_content_type: application/octet-stream

  build-macos:
    name: Build macOS Universal
    needs: create-release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v3/cmd/wails3@latest

      - name: Install Task
        run: go install github.com/go-task/task/v3/cmd/task@latest

      - name: Update version.txt
        run: echo "${{ needs.create-release.outputs.version }}" > version.txt

      - name: Build macOS Universal App Bundle
        run: task darwin:package:universal

      - name: Ad-hoc code sign (for non-App Store distribution)
        run: |
          # Remove quarantine attributes
          xattr -cr bin/rclone-selective-sync.app
          # Ad-hoc sign the app
          codesign --force --deep --sign - bin/rclone-selective-sync.app
          # Verify signature
          codesign --verify --verbose bin/rclone-selective-sync.app

      - name: Create macOS DMG (better than ZIP for distribution)
        run: |
          # Create a temporary directory for the DMG
          mkdir -p dmg-temp
          cp -R bin/rclone-selective-sync.app dmg-temp/

          # Create a symlink to Applications folder
          ln -s /Applications dmg-temp/Applications

          # Create the DMG
          hdiutil create -volname "Rclone Selective Sync" \
            -srcfolder dmg-temp \
            -ov -format UDZO \
            bin/rclone-selective-sync.dmg

          # Also create a ZIP as backup
          cd bin
          zip -r -y rclone-selective-sync.app.zip rclone-selective-sync.app

      - name: Create README for macOS users
        run: |
          cat > bin/MACOS_README.txt << 'EOF'
          macOS Installation Instructions
          ================================

          Option 1: Using DMG (Recommended)
          ----------------------------------
          1. Download rclone-selective-sync.dmg
          2. Open the DMG file
          3. Drag the app to the Applications folder
          4. Right-click (or Control-click) on the app in Applications
          5. Select "Open" from the menu
          6. Click "Open" in the security dialog

          Option 2: Using Terminal (If right-click doesn't work)
          -------------------------------------------------------
          After installing, run this command in Terminal:

          sudo xattr -cr /Applications/rclone-selective-sync.app

          Then you can open it normally.

          Why this is needed:
          This app is not signed with an Apple Developer certificate ($99/year).
          macOS Gatekeeper requires this extra step for unsigned apps.
          EOF

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./bin/rclone-selective-sync.dmg
          asset_name: rclone-selective-sync.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload macOS ZIP (Alternative)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./bin/rclone-selective-sync.app.zip
          asset_name: rclone-selective-sync.app.zip
          asset_content_type: application/zip

      - name: Upload macOS README
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./bin/MACOS_README.txt
          asset_name: MACOS_README.txt
          asset_content_type: text/plain

  build-linux:
    name: Build Linux
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          sudo apt-get update
          # Try 4.1 first (Ubuntu 22.04+), fall back to 4.0 if needed
          sudo apt-get install -y libgtk-3-dev build-essential pkg-config
          sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v3/cmd/wails3@latest

      - name: Install Task
        run: go install github.com/go-task/task/v3/cmd/task@latest

      - name: Install nfpm
        run: |
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          sudo apt-get update
          sudo apt-get install -y nfpm

      - name: Update version.txt
        run: echo "${{ needs.create-release.outputs.version }}" > version.txt

      - name: Build Linux Packages
        run: task linux:package

      - name: List bin directory
        run: |
          if [ -d bin ]; then
            ls -lah bin/
          else
            echo "bin directory does not exist"
          fi
        if: always()

      - name: Upload AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./bin/rclone-selective-sync-x86_64.AppImage
          asset_name: rclone-selective-sync-x86_64.AppImage
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload DEB Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./bin/rclone-selective-sync_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_name: rclone-selective-sync_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package
        continue-on-error: true

      - name: Upload RPM Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./bin/rclone-selective-sync-${{ needs.create-release.outputs.version }}-1.x86_64.rpm
          asset_name: rclone-selective-sync-${{ needs.create-release.outputs.version }}-1.x86_64.rpm
          asset_content_type: application/x-rpm
        continue-on-error: true
