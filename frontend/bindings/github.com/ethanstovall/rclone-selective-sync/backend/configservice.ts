// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * Service structure for project-related operations.
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * Load the global configuration. This configuration determines what the Rclone remotes
 * are, and where their corresponding local project folders are found. Note that we return
 * the entire configuration object, in addition to the selected project string. The frontend
 * doesn't need the entire global configuration, so the selected project name should be
 * enough to allow user selection.
 * TODO Don't expose the application keys in the frontend; send only the remote names.
 */
export function LoadGlobalConfig(): Promise<[$models.GlobalConfig, string]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1686438339) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        $result[0] = $$createType0($result[0]);
        return $result;
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * Navigate to the specified project directory and find the sync.json config file. If it is not found,
 * create a blank one.
 */
export function LoadSelectedProjectConfig(): Promise<$models.ProjectConfig> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3182534090) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * Write the given selected project to the global configuration file.
 */
export function SetSelectedProject(selectedProject: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2749222836, selectedProject) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = $models.GlobalConfig.createFrom;
const $$createType1 = $models.ProjectConfig.createFrom;
