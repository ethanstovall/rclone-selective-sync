// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * Wrapper function for creating folders
 */
export function CreateLocalFolders(targetFolders: string[]): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1403706680, targetFolders) as any;
    return $resultPromise;
}

/**
 * Wrapper function for deleting folders
 */
export function DeleteLocalFolders(targetFolders: string[]): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1155014579, targetFolders) as any;
    return $resultPromise;
}

export function DeregisterFolder(targetFolder: string): Promise<$models.ProjectConfig> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1475157726, targetFolder) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * Given an existing folder, a new folder name, and a new FolderConfig, update the existing folder to match the new items.
 * Return the entire ProjectConfig after, which will contain the fully updated map of Folders.
 */
export function EditFolder(currentFolderName: string, newFolderName: string, newFolderConfig: $models.FolderConfig): Promise<$models.ProjectConfig> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1535184624, currentFolderName, newFolderName, newFolderConfig) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetLocalFolders checks if the local paths for all folders in the ProjectConfig exist.
 * Returns a list of folder keys where the paths exist, or an error if something goes wrong.
 */
export function GetLocalFolders(): Promise<string[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1746980032) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * Open the requested folder in the user's file explorer
 */
export function OpenFolder(targetFolder: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3234094764, targetFolder) as any;
    return $resultPromise;
}

/**
 * Given a new folder name and a new FolderConfig, create a new FolderConfig for it in the ProjectConfig.
 * Return the entire ProjectConfig after, which will contain the fully updated map of Folders.
 */
export function RegisterNewFolder(newFolderName: string, folderConfig: $models.FolderConfig): Promise<$models.ProjectConfig> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1863241101, newFolderName, folderConfig) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = $models.ProjectConfig.createFrom;
const $$createType1 = $Create.Array($Create.Any);
