// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class FolderConfig {
    "remote_path": string;
    "local_path": string;

    /** Creates a new FolderConfig instance. */
    constructor($$source: Partial<FolderConfig> = {}) {
        if (!("remote_path" in $$source)) {
            this["remote_path"] = "";
        }
        if (!("local_path" in $$source)) {
            this["local_path"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new FolderConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): FolderConfig {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new FolderConfig($$parsedSource as Partial<FolderConfig>);
    }
}

export class GlobalConfig {
    "selected_project": string;
    "remotes": { [_: string]: RemoteConfig };

    /** Creates a new GlobalConfig instance. */
    constructor($$source: Partial<GlobalConfig> = {}) {
        if (!("selected_project" in $$source)) {
            this["selected_project"] = "";
        }
        if (!("remotes" in $$source)) {
            this["remotes"] = {};
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new GlobalConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): GlobalConfig {
        const $$createField1_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("remotes" in $$parsedSource) {
            $$parsedSource["remotes"] = $$createField1_0($$parsedSource["remotes"]);
        }
        return new GlobalConfig($$parsedSource as Partial<GlobalConfig>);
    }
}

export class ProjectConfig {
    "allow_global_sync": boolean;
    "folders": { [_: string]: FolderConfig };

    /** Creates a new ProjectConfig instance. */
    constructor($$source: Partial<ProjectConfig> = {}) {
        if (!("allow_global_sync" in $$source)) {
            this["allow_global_sync"] = false;
        }
        if (!("folders" in $$source)) {
            this["folders"] = {};
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ProjectConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): ProjectConfig {
        const $$createField1_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("folders" in $$parsedSource) {
            $$parsedSource["folders"] = $$createField1_0($$parsedSource["folders"]);
        }
        return new ProjectConfig($$parsedSource as Partial<ProjectConfig>);
    }
}

export enum RcloneAction {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    PUSH = "PUSH",
    PULL = "PULL",
};

export class RcloneActionOutput {
    "target_folder": string;
    "command_output": string;
    "command_error": string;

    /** Creates a new RcloneActionOutput instance. */
    constructor($$source: Partial<RcloneActionOutput> = {}) {
        if (!("target_folder" in $$source)) {
            this["target_folder"] = "";
        }
        if (!("command_output" in $$source)) {
            this["command_output"] = "";
        }
        if (!("command_error" in $$source)) {
            this["command_error"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RcloneActionOutput instance from a string or object.
     */
    static createFrom($$source: any = {}): RcloneActionOutput {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new RcloneActionOutput($$parsedSource as Partial<RcloneActionOutput>);
    }
}

export class RemoteConfig {
    "remote_name": string;
    "bucket_name": string;
    "type": string;
    "account": string;
    "key": string;
    "local_path": string;

    /** Creates a new RemoteConfig instance. */
    constructor($$source: Partial<RemoteConfig> = {}) {
        if (!("remote_name" in $$source)) {
            this["remote_name"] = "";
        }
        if (!("bucket_name" in $$source)) {
            this["bucket_name"] = "";
        }
        if (!("type" in $$source)) {
            this["type"] = "";
        }
        if (!("account" in $$source)) {
            this["account"] = "";
        }
        if (!("key" in $$source)) {
            this["key"] = "";
        }
        if (!("local_path" in $$source)) {
            this["local_path"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RemoteConfig instance from a string or object.
     */
    static createFrom($$source: any = {}): RemoteConfig {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new RemoteConfig($$parsedSource as Partial<RemoteConfig>);
    }
}

// Private type creation functions
const $$createType0 = RemoteConfig.createFrom;
const $$createType1 = $Create.Map($Create.Any, $$createType0);
const $$createType2 = FolderConfig.createFrom;
const $$createType3 = $Create.Map($Create.Any, $$createType2);
