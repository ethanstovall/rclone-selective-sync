// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

/**
 * @typedef {{ [_: string]: ProjectConfig }} GlobalConfig
 */

export class InitializerService {
    /**
     * Creates a new InitializerService instance.
     * @param {Partial<InitializerService>} [$$source = {}] - The source object to create the InitializerService.
     */
    constructor($$source = {}) {
        if (!("ConfigPath" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["ConfigPath"] = "";
        }
        if (!("Config" in $$source)) {
            /**
             * @member
             * @type {GlobalConfig | null}
             */
            this["Config"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new InitializerService instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {InitializerService}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Config" in $$parsedSource) {
            $$parsedSource["Config"] = $$createField1_0($$parsedSource["Config"]);
        }
        return new InitializerService(/** @type {Partial<InitializerService>} */($$parsedSource));
    }
}

export class ProjectConfig {
    /**
     * Creates a new ProjectConfig instance.
     * @param {Partial<ProjectConfig>} [$$source = {}] - The source object to create the ProjectConfig.
     */
    constructor($$source = {}) {
        if (!("rclone_remote" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["rclone_remote"] = "";
        }
        if (!("local_path" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["local_path"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ProjectConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ProjectConfig}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ProjectConfig(/** @type {Partial<ProjectConfig>} */($$parsedSource));
    }
}

// Private type creation functions
var $$createType0 = /** @type {(...args: any[]) => any} */(function $$initCreateType0(...args) {
    if ($$createType0 === $$initCreateType0) {
        $$createType0 = $$createType2;
    }
    return $$createType0(...args);
});
const $$createType1 = ProjectConfig.createFrom;
const $$createType2 = $Create.Map($Create.Any, $$createType1);
const $$createType3 = $Create.Nullable($$createType0);
